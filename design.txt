接口数据结构定义
---------------

websocket 交互：json格式
连接后自动发送数据给浏览器
-停止发送，继续发送

明明规范：Java和javascript采用pascalCase和TitleCase命名法，html里的class和id都用kebab-case

日志流管理
==========

GET POST通信

删除日志流
/delete_log/:logid
/delete_log_array {'todelete':[logid...]}

查询管理
========

websocket通信

browser --> server
注册查询
{
'type':'register'
'logId':logId
'query':sql
'queryName':qname
}

注销查询
{
'type':'cancelQuery'
'logid': logid
'queryId':queryId
}

请求预测
{
'type':'Predict'
'logid': logid
'queryId':queryId
'seq':[[..,],..]
}

server-->browser

返回数据(或者失败)
{
'type':'queryData'
'queryId':queryId
'data':[[],[],...]
}

后台渲染
=======

log详细信息
logId:logId,
ddl:ddl,
createTime:createTime,
executeTime:executeTime,
-fieldNames:fieldNames,
-fieldTypes:fieldTypes

返回query列表（连接socket后1）
{
type:queriesList
logId:logId
queriesId:[]
}

返回某个query的元信息（连接socket后1）
{
type:queryMeta
qtype:FlinkSQL|FrequentPattern
logId:
queryId:
queryName:

fieldNames:[field1,...]
querySql:sql
|
caseField
eventsFields:[]
}

浏览器数据结构
=============

Queries=[
 {
  qid:,
  qtype:FlinkSQL|FrequentPattern|Predict,
  fieldNames:[field1,...],
  querySql:,
  eventKeysValues,(for Predict)
  data:data,
  queryCharts:[
            {
               cid:,
               ctype:graph|table,
               (for graph)
               chartInstance:,
               customizedOption:{option:option}
            },...
       ]
 },
]

option={
  legend:{},
  tooltip:{},
  dataset:{source:[[],[],[]]},
  xAxis:{type:},
  yAxis:{type:},
  series:[{type:, encode:{x:0, y:1}},..]
}

source=[[f1,f2,f3],[v1,v2,v3],[v1,v2,v3]]

浏览器dom树
===========

queries:
    query:
        query-label
        query-control
        charts:
            chart:
                chart-display
                chart-control

<qId>是html中query的id,命名采用q+queryId, 由于连接socket后首先返回querylist,所以是有序的(js按实际创建顺序)

总结

浏览器向服务器发送的数据类型：
注册注销日志，注册注销查询

界面功能
=====

日志管理界面

1. 添加日志流
2. 删除日志流

查询管理界面功能列表

1. 选择每个系列的是否可见以及图表样式。
2. TODO 选择哪个域作x轴(先要实现非时间域作为x轴的后台)
3. 添加图
4. 删除图
5. 折叠查询

注册日志|SQL注册|多选|删除所选|帮助

新增查询|SQL查询|新增图表|多选|删除所选|频繁模式|帮助|

删除所选 全选 全不选 固定悬浮在右上角

定期执行SQL->SqlResult->kafka事件流 之后如何处理该事件流和上面一样

文件流： 文件 -> 查询 CREATE TABLE ...
Kafka流： Kafka -> 查询 CREATE TABLE ...
DM数据流：DM.Kafka -> 查询 SELECT ...
